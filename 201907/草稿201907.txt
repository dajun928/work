ETL  BI  大数据 

业务  数据分析 pandas excel mysql  matplot

BI

ETL

爬虫

python后台开发

动手敲代码

多动手


多看技术方案



逻辑思维


敲代码  


http://172.18.127.255:5000/
http://47.107.177.19:5000/


http://47.107.177.19:8088/


使用gunicorn 启动工程


gunicorn -w 3 -b 127.0.0.1:8000 helloworld:app
gunicorn -w 3 -b 127.0.0.1:8000 helloworld:app




部署项目时 请求流程
Client <===> Nginx <===> gunicorn <===> Flask服务


配置nginx 服务器脚本1.安装完的nginx 在 /usr/local/nginx 目录下， 我们可以找到conf文件夹下的 nginx.conf 文件， 将其修改
 
2.

cd /usr/local/src
wget http://nginx.org/download/nginx-1.1.10.tar.gz
tar -zxvf nginx-1.1.10.tar.gz
cd nginx-1.1.10
./configure
make
make install

#添加nginx 需要监听的端口信息
server {

listen 8001;
server_name instagram.zhyh2010.com;
location /{
proxy_pass http://127.0.0.1:8000; }
}
实际上， 我们将外部通过 8001 端口发送过来的请求， 代理给了 127.0.0.1:8000 也就是我们的 flask 项目

记得完成 nginx 需要重新起动 nginx 服务喔！


2.这里说明一下: 
- D 表示后台运行 
- w 表示有3 个 工作线程（感觉有些类似 nginx 的 master-worker 模型） 
- b 指定ip 和端口 
- 这里采用本机访问， 主要是为了使用nginx 进行代理， 方便管理 
- application 表存放 写着全局变量 app 的那个工程文件夹 
- 在我们的这个工程中， 即包含 init.py 的那个文件 
- app 为全局变量 （app = Flask(__name__)） 
- ps： 在下面图示文件夹中运行 gunicorn 指令 

到达这一步，可以在linux服务器上访问127.0.0.1:8000
注意：如果想通过本地Windows访问的话就要把ip改为阿里云的公网的ip







# gunicorn.py
import logging
import logging.handlers
from logging.handlers import WatchedFileHandler
import os
import multiprocessing
bind = '127.0.0.1:5000'      #绑定ip和端口号
backlog = 512                #监听队列
chdir = '/home/test/server/bin'  #gunicorn要切换到的目的工作目录
timeout = 30      #超时
worker_class = 'gevent' #使用gevent模式，还可以使用sync 模式，默认的是sync模式

workers = multiprocessing.cpu_count() * 2 + 1    #进程数
threads = 2 #指定每个进程开启的线程数
loglevel = 'info' #日志级别，这个日志级别指的是错误日志的级别，而访问日志的级别无法设置
access_log_format = '%(t)s %(p)s %(h)s "%(r)s" %(s)s %(L)s %(b)s %(f)s" "%(a)s"'    #设置gunicorn访问日志格式，错误日志无法设置

"""
其每个选项的含义如下：
h          remote address
l          '-'
u          currently '-', may be user name in future releases
t          date of the request
r          status line (e.g. ``GET / HTTP/1.1``)
s          status
b          response length or '-'
f          referer
a          user agent
T          request time in seconds
D          request time in microseconds
L          request time in decimal seconds
p          process ID
"""
accesslog = "/root/homework/flask_test/logs/gunicorn_access.log"      #访问日志文件
errorlog = "/root/homework/flask_test/logs//gunicorn_error.log"        #错误日志文件



ll /proc/28282


23:28	Error running 'test': Cannot run program 
"D:\PycharmProjects\python2\venv\Scripts\python.exe" 
(in directory "D:\PycharmProjects\flask_test\flask_test"): CreateProcess error=2, 系统找不到指定的文件。


手把手教你在Linux环境下安装Python3
https://blog.csdn.net/zhangdongren/article/details/82685932


传智微服务Spring Cloud&Docker视频教程
https://www.bilibili.com/video/av32048704/?p=45
https://github.com/dajun928/Word


nginx
https://www.bilibili.com/video/av22576578/?p=4
http://www.edrawsoft.cn/viewer/public/s/e194d338895116

--------------------------------------------------------------------------------------------
第一步，下载mysql的镜像：
地址：https://hub.docker.com/_/percona/

docker pull percona:5.6
 
 

第二步，创建容器：
docker create --name percona -v /data/mysql-data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root percona:5.6

解释：
--name percona 指定是容器的名称
-v /data/mysql-data:/var/lib/mysql  将主机目录/data/mysql-data挂载到容器的/var/lib/mysql上
-p 33306:3306 设置端口映射，主机端口是33306，容器内部端口3306
-e MYSQL_ROOT_PASSWORD=root  设置容器参数，设置root用户的密码为root
percona:5.6 镜像名:版本

 

第三步，启动容器：
docker start percona

 

第四步，进行测试：


docker create -p 16379:6379 --name redis redis:4.0



ssh://root:************@47.107.177.19:22


--------------------------------------------------------------------------------------------
案例：创建Redis的容器。

docker create -p 16379:6379 --name redis redis:3.0
 
查看容器列表：
docker ps -a 

启动容器：
docker start redis #指定容器的id，只要输入前几位即可
 

通过客户端进行测试：

--------------------------------------------------------------------------------------------


#第一行必须指令基于的基础镜像
FROM ubutu

#维护者信息
MAINTAINER docker_user  zhangzhijun@itcast.cn

#镜像的操作指令
RUN echo "deb http://archive.ubuntu.com/ubuntu/ raring main universe" >> /etc/apt/sources.list
RUN apt-get update && apt-get install -y ngnix 
RUN echo "\ndaemon off;">>/etc/ngnix/nignix.conf

#容器启动时执行指令
CMD /usr/sbin/ngnix

如何使用Docker部署Flask应用
https://www.bilibili.com/video/av59236839?from=search&seid=10025361429857424928
https://www.theodoresi.top/blog/vim/deploy-a-flask-app-in-docker




生成requirements.txt文件
pip freeze > requirements.txt


安装requirements.txt依赖
pip install -r requirements.txt

-----------------------------------------------------------------------------------------
FROM python:3

WORKDIR /usr/src/app

COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [ "python", "./your-daemon-or-script.py" ]


-----------------------------------------------------------------------------------------

#基于的基础镜像
FROM python:3.7

#代码添加到code文件夹
ADD ./EF_NFCS /code

# 设置code文件夹是工作目录
WORKDIR /code

# 安装支持
RUN pip install -r requirements.txt

CMD ["python", "/code/package/server.py"]
----------------------------------------------------------------------------------------- 
作者：学编程的司马光 
来源：CSDN 
原文：https://blog.csdn.net/u013282737/article/details/85233408 
版权声明：本文为博主原创文章，转载请附上博文链接！
-----------------------------------------------------------------------------------------

#基于的基础镜像
FROM python:3

#代码添加到code文件夹
ADD ./flask_demo /usr/src/app

# 设置app文件夹是工作目录
WORKDIR /usr/src/app

# 安装支持
RUN pip install --no-cache-dir -r requirements.txt


CMD [ "python", "/usr/src/app/api_server.py" ]

docker build -t flask_demo_img .

docker run -it -p 8060:5001 --name flask_demo_cn flask_demo_img




import requests

url="http://127.0.0.1:8060/"        # local test


responses=requests.get(url)
print(responses)
# 查看响应内容，response.text 返回的是Unicode格式的数据
print(responses.text)



----------------------------------------------------------------------------------------
[root@mylinux docker_test]# tree
.
├── Dockerfile
└── flask_demo
    ├── api_client.py
    ├── api_server.py
    ├── __init__.py
    ├── requirements.txt
    └── test.py

1 directory, 6 files
------------------------------------------------------
[root@mylinux docker_test]# cat Dockerfile 
#基于的基础镜像
FROM python:3

#代码添加到code文件夹
ADD ./flask_demo /usr/src/app

# 设置app文件夹是工作目录
WORKDIR /usr/src/app

# 安装支持
RUN pip install --no-cache-dir -r requirements.txt

CMD [ "python", "/usr/src/app/api_server.py" ]
------------------------------------------------------

生成镜像
docker build -t flask_demo_img .

启动容器
docker run -it -p 8060:5001 --name flask_demo_cn flask_demo_img
----------------------------------------------------------------------------------------

抠图apikey
CbzeqiVnS6Mauh1CZnBS6H7p

TCTuBck2fDSnAYNYANezgmXi

----------------------------------------------------------------------------------------
Flask-RESTful 插件的学习

json格式化工具
https://jsoncompare.com/#!/simple/




































































